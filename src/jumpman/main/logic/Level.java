package jumpman.main.logic;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Toolkit;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JPanel;

import jumpman.main.resources.GameObject;
import jumpman.main.resources.Sprite;
import jumpman.main.resources.GameObjects.GooBall;

public class Level extends JPanel implements Runnable
{	
	private static final int length = 5000;
	public static final int getLength(){return length;}
    /**
	 * Generated by serialver
	 */
	private static final long serialVersionUID = 4796115838201421109L;
	
	/**
	 * List of objects in the scene
	 */
	private List<GameObject> objects = new ArrayList<GameObject>();
	
	private final GooBall player;
	public GooBall getPlayer() { return player; }
	
	private Thread animator;

    public Level() 
    {
    	//Form stuffs
    	addKeyListener(new TAdapter());
        setFocusable(true);
        setBackground(Color.BLACK);
        setDoubleBuffered(true);
        
        this.player = new GooBall(Sprite.GOO);
    }
    
    public void addObject(GameObject obj)
    {
    	objects.add(obj);
    }
    
    public void addNotify() 
    {
        super.addNotify();
        animator = new Thread(this);
        animator.start();
    }

    public void paint(Graphics g) 
    {
        super.paint(g);
        Graphics2D g2d = (Graphics2D)g;
        
        //Draw cave background
        for(int i = -1; i <= 1; i++)
        {
        	int xPos = i * Sprite.CAVE.getWidth() - Game.getCamera().center() % Sprite.CAVE.getWidth();
    		g2d.drawImage(Sprite.CAVE.getImage(), xPos, 0, null);
        }
        
        //Draw player + everything else
        for(GameObject obj : objects)
        	obj.draw(g2d);
        
        //Draw player
        player.draw(g2d);

        Toolkit.getDefaultToolkit().sync();
        g.dispose();
    }

	public void cycle()
	{
		//Update camera
		Game.getCamera().update(Game.DELAY_MILLISECONDS, player.getTransform().getX());
		
		//Update objects
		for(int i = 0; i < objects.size();)
		{
			GameObject obj = objects.get(i);
			
			obj.Update(Game.DELAY_MILLISECONDS);
			if(obj.isDead())
				objects.remove(i);
			else
				i++;
		}
		
		//Update player
		player.Update(Game.DELAY_MILLISECONDS);
	}
    
	@Override
    public void run() 
	{
        long beforeTime, timeDiff, sleep;

        beforeTime = System.currentTimeMillis();

        while (true) 
        {
            cycle();
            repaint();

            timeDiff = System.currentTimeMillis() - beforeTime;
            sleep = Game.DELAY - timeDiff;

            if (sleep < 0)
                sleep = 2;
            try 
            {
                Thread.sleep(sleep);
            } 
            catch (InterruptedException e) 
            {
                System.out.println("interrupted");
            }

            beforeTime = System.currentTimeMillis();
        }
    }
	
    private class TAdapter extends KeyAdapter 
    {
    	@Override
        public void keyReleased(KeyEvent e) {
            player.keyReleased(e);
        }

    	@Override
        public void keyPressed(KeyEvent e) 
    	{
    		if(e.getKeyCode() == KeyEvent.VK_ESCAPE)
    			System.exit(0);
    		
            player.keyPressed(e);
        }
    }
}
